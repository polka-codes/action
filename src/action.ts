// Generated by polka.codes
// Main entry point for the Polka Codes GitHub Action

import { execSync } from 'node:child_process'
import * as core from '@actions/core'
import * as github from '@actions/github'

interface ActionInputs {
  issueNumber?: number
  prNumber?: number
  task?: string
  githubToken: string
}

type Octokit = ReturnType<typeof github.getOctokit>

async function getInputs(): Promise<ActionInputs> {
  const issueNumberStr = core.getInput('issue_number')
  const prNumberStr = core.getInput('pr_number')

  return {
    issueNumber: issueNumberStr ? Number.parseInt(issueNumberStr) : undefined,
    prNumber: prNumberStr ? Number.parseInt(prNumberStr) : undefined,
    task: core.getInput('task'),
    githubToken: core.getInput('github_token'),
  }
}

const validateInputs = (inputs: ActionInputs) => {
  if (inputs.issueNumber && inputs.prNumber) {
    throw new Error('Only one of issue_number or pr_number can be provided')
  }

  if (!inputs.issueNumber && !inputs.prNumber && !inputs.task) {
    throw new Error('One of issue_number, pr_number, or task must be provided')
  }
}

async function getTaskFromIssue(issueNumber: number, octokit: Octokit) {
  const { owner, repo } = github.context.repo
  const { data: issue } = await octokit.rest.issues.get({
    owner,
    repo,
    issue_number: issueNumber,
  })

  const { data: comments } = await octokit.rest.issues.listComments({
    owner,
    repo,
    issue_number: issueNumber,
  })

  const issueData = {
    number: issue.number,
    title: issue.title,
    body: issue.body,
    author: issue.user?.login,
    created_at: issue.created_at,
    comments: comments.map((c) => ({
      author: c.user?.login,
      body: c.body,
      created_at: c.created_at,
    })),
  }

  const commentsText = issueData.comments.map((comment) => `@${comment.author} at ${comment.created_at}:\n${comment.body}\n`).join('\n\n')

  return `Issue #${issueData.number}: ${issueData.title}
Author: @${issueData.author}
Created: ${issueData.created_at}

${issueData.body}

Comments:
${commentsText}`
}

async function getTaskFromPR(prNumber: number, octokit: Octokit) {
  const { owner, repo } = github.context.repo
  const { data: pr } = await octokit.rest.pulls.get({
    owner,
    repo,
    pull_number: prNumber,
  })
  return pr.body || ''
}

async function createPullRequest(octokit: Octokit, branchName: string, title: string, body: string) {
  const { owner, repo } = github.context.repo

  return await octokit.rest.pulls.create({
    owner,
    repo,
    title,
    body,
    head: branchName,
    base: 'main',
  })
}

export async function run(): Promise<void> {
  try {
    // Get inputs
    const inputs = await getInputs()
    validateInputs(inputs)
    const octokit = github.getOctokit(inputs.githubToken)

    // Get task description
    let taskDescription = inputs.task
    if (inputs.issueNumber) {
      taskDescription = await getTaskFromIssue(inputs.issueNumber, octokit)
    } else if (inputs.prNumber) {
      taskDescription = await getTaskFromPR(inputs.prNumber, octokit)
    }

    if (!taskDescription) {
      throw new Error('No task description provided')
    }

    // Create a new branch for changes
    const branchName = `polka/task-${Date.now()}`
    execSync(`git checkout -b ${branchName}`)

    // Process task using Polka CLI
    execSync(`polka process "${taskDescription}"`, { stdio: 'inherit' })

    // Commit and push changes
    execSync('git add .')
    execSync('git commit -m "feat: automated changes by Polka Codes"')
    execSync(`git push origin ${branchName}`)

    // Create pull request
    const pr = await createPullRequest(
      octokit,
      branchName,
      'feat: automated changes by Polka Codes',
      `Changes generated by Polka Codes based on the following task:\n\n${taskDescription}`,
    )

    core.setOutput('pull_request_number', pr.data.number)
    core.setOutput('pull_request_url', pr.data.html_url)
  } catch (error) {
    if (error instanceof Error) {
      core.setFailed(error.message)
    } else {
      core.setFailed('An unexpected error occurred')
    }
  }
}
