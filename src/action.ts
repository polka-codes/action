// Generated by polka.codes
// Main entry point for the Polka Codes GitHub Action

import { platform } from 'node:os'
import * as core from '@actions/core'
import { getExecOutput } from '@actions/exec'
import * as github from '@actions/github'
import { fetchIssue, fetchPR } from '@polka-codes/github'

interface SpecificReview {
  file: string
  lines: string // e.g., '10' or '10-15'
  review: string
}

interface ReviewOutput {
  overview: string
  specificReviews: SpecificReview[]
}

interface ActionInputs {
  issueNumber?: number
  prNumber?: number
  task?: string
  config?: string
  cliVersion: string
  runnerPayload?: string
  runnerApiUrl: string
  review: boolean
  verbose?: number
}

const coerceNumber = (value: string | undefined): number | undefined => {
  const v = value?.trim()
  if (!v) return undefined
  const n = Number.parseInt(v, 10)
  return Number.isFinite(n) && n > 0 ? n : undefined
}

const coerceBoolean = (value: string | undefined): boolean => value?.trim().toLowerCase() === 'true'

const generateVerboseFlags = (verbose?: number): string[] => {
  if (!verbose || verbose < 1) return []
  return [`-${'v'.repeat(Math.min(verbose, 5))}`]
}

async function getInputs(): Promise<ActionInputs> {
  core.debug('Getting action inputs')
  const issueNumberStr = core.getInput('issue_number')
  const prNumberStr = core.getInput('pr_number')
  const verboseStr = core.getInput('verbose')

  const inputs: ActionInputs = {
    issueNumber: coerceNumber(issueNumberStr),
    prNumber: coerceNumber(prNumberStr),
    task: core.getInput('task') || undefined,
    config: core.getInput('config') || undefined,
    cliVersion: core.getInput('cli_version') || 'latest',
    runnerPayload: core.getInput('runner_payload') || undefined,
    runnerApiUrl: core.getInput('runner_api_url'),
    review: coerceBoolean(core.getInput('review')),
    verbose: coerceNumber(verboseStr),
  }

  core.debug(
    `Received inputs: issue=${issueNumberStr}, pr=${prNumberStr}, task=${inputs.task ? '[provided]' : 'none'}, config=${inputs.config ?? 'none'}, review=${inputs.review}, verbose=${inputs.verbose ?? 'none'}`,
  )
  return inputs
}

const validateInputs = (inputs: ActionInputs) => {
  core.debug('Validating inputs')

  if (inputs.runnerPayload) {
    if (inputs.issueNumber || inputs.prNumber || inputs.task) {
      const error = 'issue_number, pr_number, or task cannot be used when used as remote runner'
      core.error(error)
      throw new Error(error)
    }
    return
  }

  if (inputs.review) {
    if (!inputs.prNumber && !inputs.issueNumber) {
      throw new Error('Review mode requires either a "pr_number" or "issue_number" input.')
    }
    if (inputs.task) {
      core.warning('The "task" input is ignored when in review mode.')
    }
    return
  }

  if (inputs.issueNumber && inputs.prNumber) {
    const error = 'Only one of issue_number or pr_number can be provided'
    core.error(error)
    throw new Error(error)
  }

  if (!inputs.issueNumber && !inputs.prNumber && !inputs.task) {
    const error = 'One of issue_number, pr_number, or task must be provided'
    core.error(error)
    throw new Error(error)
  }
}

const sanitizePath = (path: string): string => {
  const trimmedPath = path.trim()
  if (trimmedPath.includes('..') || /[&;|`<>!$*]/.test(trimmedPath)) {
    throw new Error(`Invalid or disallowed character in config path: ${trimmedPath}`)
  }
  return trimmedPath
}

// The result of a command execution
interface ExecResult {
  // The exit code of the command. Non-zero indicates failure.
  exitCode: number
  // The stdout of the command
  stdout: string
  // The stderr of the command
  stderr: string
}

const safeExec = async (
  cmd: string,
  args: string[],
  options?: {
    // Whether to inherit stdio. If false, the output will be captured.
    inheritStdio?: boolean
  },
): Promise<ExecResult> => {
  const startedAt = Date.now()
  const pretty = `${cmd} ${args.join(' ')}`
  core.debug(`exec: ${pretty}`)

  try {
    const res = await getExecOutput(cmd, args, { ignoreReturnCode: true })

    if (options?.inheritStdio) {
      if (res.stdout) core.info(res.stdout)
      if (res.stderr) core.error(res.stderr)
    }

    const duration = Date.now() - startedAt
    const outcome = res.exitCode === 0 ? 'succeeded' : `failed (code ${res.exitCode})`
    core.debug(`exec ${outcome} in ${duration}ms: ${pretty}`)

    if (res.exitCode !== 0 && !options?.inheritStdio) {
      if (res.stderr) core.debug(`stderr: ${res.stderr}`)
      if (res.stdout) core.debug(`stdout: ${res.stdout}`)
    }

    return { exitCode: res.exitCode, stdout: res.stdout, stderr: res.stderr }
  } catch (e) {
    const duration = Date.now() - startedAt
    core.debug(`exec failed in ${duration}ms: ${pretty}`)
    if (e instanceof Error) {
      core.debug(e.message)
    }
    return { exitCode: 1, stdout: '', stderr: e instanceof Error ? e.message : 'Unknown error' }
  }
}

const parseJson = <T>(raw: string, context: string): T => {
  try {
    return JSON.parse(raw) as T
  } catch (e) {
    core.error(`Failed to parse JSON for ${context}`)
    core.debug(`Raw JSON: ${raw}`)
    throw e instanceof Error ? e : new Error('JSON parse error')
  }
}

const remoteRunner = async (inputs: { runnerPayload: string; cliVersion: string; runnerApiUrl: string }) => {
  const payload = parseJson<{ ref?: string; taskId: string; sessionToken: string }>(inputs.runnerPayload, 'runnerPayload')
  if (payload.ref) {
    const fetchResult = await safeExec('git', ['fetch', 'origin', payload.ref], { inheritStdio: true })
    if (fetchResult.exitCode !== 0) {
      throw new Error(`git fetch failed with exit code ${fetchResult.exitCode}`)
    }
    const checkoutResult = await safeExec('git', ['checkout', payload.ref], { inheritStdio: true })
    if (checkoutResult.exitCode !== 0) {
      throw new Error(`git checkout failed with exit code ${checkoutResult.exitCode}`)
    }
  }
  const oidcToken = await core.getIDToken('https://polka.codes')
  await safeExec(
    'npx',
    [
      `@polka-codes/runner@${inputs.cliVersion}`,
      '--task-id',
      payload.taskId,
      '--session-token',
      payload.sessionToken,
      '--github-token',
      oidcToken,
      '--api',
      inputs.runnerApiUrl,
    ],
    { inheritStdio: true },
  )
}

async function handleReview(inputs: ActionInputs): Promise<void> {
  core.info('Starting review process...')
  const octokit = github.getOctokit(process.env.GITHUB_TOKEN ?? '')
  const { owner, repo } = github.context.repo

  let configArgs: string[] = []
  if (inputs.config) {
    const configPaths = inputs.config.split(',').map(sanitizePath)
    configArgs = configPaths.flatMap((p) => ['--config', p])
    core.info(`Using config files for review: ${configPaths.join(', ')}`)
  }

  const verboseFlags = generateVerboseFlags(inputs.verbose)
  if (verboseFlags.length > 0) {
    core.info(`Using verbosity flags: ${verboseFlags.join(' ')}`)
  }

  core.info('Executing review command...')
  const reviewCommand = await safeExec('npx', [
    `@polka-codes/cli@${inputs.cliVersion}`,
    ...configArgs,
    ...verboseFlags,
    'review',
    '--json',
    '--pr',
    String(inputs.prNumber),
  ])

  if (reviewCommand.exitCode !== 0) {
    const errorMessage = `Review command failed with exit code ${reviewCommand.exitCode}`
    core.error(errorMessage)
    core.error(`stderr: ${reviewCommand.stderr}`)
    if (reviewCommand.stdout) core.error(`stdout: ${reviewCommand.stdout}`)
    throw new Error(errorMessage)
  }

  const jsonOutput = reviewCommand.stdout
  const reviewData = parseJson<ReviewOutput>(jsonOutput, 'review output JSON')

  const { overview, specificReviews } = reviewData
  const issue_number = inputs.prNumber ?? inputs.issueNumber

  if (!issue_number) {
    throw new Error('No PR or issue number found for review posting.')
  }

  const postGeneralComment = async (fallbackMessage?: string) => {
    if (!overview) return
    const body = fallbackMessage ? `${fallbackMessage}\n\n${overview}` : overview
    core.info(`Posting overview as a general comment to #${issue_number}.`)
    await octokit.rest.issues.createComment({ owner, repo, issue_number, body })
  }

  if (specificReviews.length > 0 && inputs.prNumber) {
    core.info(`Posting a PR review with up to ${specificReviews.length} specific comments.`)
    const { data: pr } = await octokit.rest.pulls.get({ owner, repo, pull_number: inputs.prNumber })

    const parseLines = (lines: string): { line: number; start_line?: number } | null => {
      const trimmedLines = lines.trim()
      if (/^\d+$/.test(trimmedLines)) {
        const line = Number(trimmedLines)
        return line > 0 ? { line } : null
      }
      if (/^\d+-\d+$/.test(trimmedLines)) {
        const [start, end] = trimmedLines.split('-').map((n) => Number(n))
        if (start >= 1 && end >= start) return { start_line: start, line: end }
      }
      core.warning(`Invalid lines format: "${lines}". It will be ignored.`)
      return null
    }

    const reviewComments = specificReviews.flatMap(({ file, lines, review }) => {
      const lineInfo = parseLines(lines)
      if (!lineInfo) return []
      if (lineInfo.start_line !== undefined) {
        return [
          {
            path: file,
            body: review,
            start_line: lineInfo.start_line,
            start_side: 'RIGHT' as const,
            line: lineInfo.line,
            side: 'RIGHT' as const,
          },
        ]
      }
      return [
        {
          path: file,
          body: review,
          line: lineInfo.line,
          side: 'RIGHT' as const,
        },
      ]
    })

    if (reviewComments.length > 0) {
      try {
        await octokit.rest.pulls.createReview({
          owner,
          repo,
          pull_number: inputs.prNumber,
          commit_id: pr.head.sha,
          body: overview,
          event: 'COMMENT',
          comments: reviewComments,
        })
      } catch (error) {
        const message = `Failed to create PR review. Falling back to a general comment. Error: ${
          error instanceof Error ? error.message : 'Unknown error'
        }`
        core.warning(message)
        await postGeneralComment('Polka Codes review overview:')
      }
    } else {
      await postGeneralComment()
    }
  } else if (overview) {
    await postGeneralComment()
  } else {
    core.info('No overview or specific reviews to post.')
  }
}

export async function run(): Promise<void> {
  try {
    const actionStart = Date.now()
    core.startGroup('Environment setup')
    if (platform() === 'linux') {
      const rgCheck = await safeExec('rg', ['--version'])
      if (rgCheck.exitCode === 0) {
        core.debug('ripgrep is already installed.')
      } else {
        core.info('ripgrep not found, installing it.')
        const aptUpdate = await safeExec('sudo', ['apt-get', 'update'], { inheritStdio: true })
        if (aptUpdate.exitCode !== 0) {
          throw new Error(`apt-get update failed with exit code ${aptUpdate.exitCode}`)
        }
        const rgInstall = await safeExec('sudo', ['apt-get', 'install', '-y', '--no-install-recommends', 'ripgrep'], {
          inheritStdio: true,
        })
        if (rgInstall.exitCode !== 0) {
          throw new Error(`ripgrep installation failed with exit code ${rgInstall.exitCode}`)
        }
      }
    }
    core.endGroup()

    core.startGroup('Read and validate inputs')
    const inputs = await getInputs()
    validateInputs(inputs)
    core.info(`Mode: ${inputs.runnerPayload ? 'remote-runner' : inputs.review ? 'review' : 'task'}`)
    core.endGroup()

    if (inputs.runnerPayload) {
      core.startGroup('Remote runner')
      await remoteRunner({ runnerPayload: inputs.runnerPayload, cliVersion: inputs.cliVersion, runnerApiUrl: inputs.runnerApiUrl })
      core.endGroup()
      core.info(`Completed in ${Date.now() - actionStart}ms`)
      return
    }

    if (inputs.review) {
      core.startGroup('Review mode')
      await handleReview(inputs)
      core.endGroup()
      core.info(`Completed in ${Date.now() - actionStart}ms`)
      return
    }

    const octokit = github.getOctokit(process.env.GITHUB_TOKEN ?? '')
    const { owner, repo } = github.context.repo
    core.info(`Processing repository: ${owner}/${repo}`)

    core.info('Fetching task description')
    let taskDescription = ''
    if (inputs.issueNumber) {
      core.startGroup(`Fetch issue #${inputs.issueNumber}`)
      taskDescription = await fetchIssue({ owner, repo, issueNumber: inputs.issueNumber, octokit })
      core.debug(`Fetched issue description length: ${taskDescription.length}`)
      core.endGroup()
    } else if (inputs.prNumber) {
      core.startGroup(`Fetch PR #${inputs.prNumber}`)
      taskDescription = await fetchPR({ owner, repo, prNumber: inputs.prNumber, octokit })
      core.debug(`Fetched PR description length: ${taskDescription.length}`)
      core.endGroup()
    }
    if (inputs.task) {
      taskDescription = `${inputs.task}\n\n${taskDescription}`
    }

    if (!taskDescription) {
      const error = 'No task description provided'
      core.error(error)
      throw new Error(error)
    }

    let configArgs: string[] = []
    if (inputs.config) {
      const configPaths = inputs.config.split(',').map(sanitizePath)
      configArgs = configPaths.flatMap((p) => ['--config', p])
      core.info(`Using config files: ${configPaths.join(', ')}`)
    }

    const verboseFlags = generateVerboseFlags(inputs.verbose)
    if (verboseFlags.length > 0) {
      core.info(`Using verbosity flags: ${verboseFlags.join(' ')}`)
    }

    let branchName = ''

    if (inputs.prNumber) {
      core.startGroup(`Checkout PR #${inputs.prNumber}`)
      await safeExec('gh', ['pr', 'checkout', String(inputs.prNumber)], { inheritStdio: true })
      core.endGroup()
    } else {
      branchName = `polka/task-${Date.now()}`
      core.startGroup(`Create branch ${branchName}`)
      await safeExec('git', ['checkout', '-b', branchName], { inheritStdio: true })
      core.endGroup()
    }

    core.startGroup('Run Polka Codes CLI')
    core.debug(`Task description length: ${taskDescription.length}`)
    await safeExec('npx', [`@polka-codes/cli@${inputs.cliVersion}`, ...configArgs, ...verboseFlags, taskDescription], {
      inheritStdio: true,
    })
    core.endGroup()

    core.startGroup('Commit and push changes')
    const addResult = await safeExec('git', ['add', '.'], { inheritStdio: true })
    if (addResult.exitCode !== 0) {
      throw new Error(`git add failed with exit code ${addResult.exitCode}`)
    }
    await safeExec('npx', [`@polka-codes/cli@${inputs.cliVersion}`, ...configArgs, ...verboseFlags, 'commit'], { inheritStdio: true })
    if (branchName) {
      core.info(`Pushing to branch: ${branchName}`)
      await safeExec('git', ['push', 'origin', branchName], { inheritStdio: true })
    } else {
      core.info('Pushing to current branch')
      await safeExec('git', ['push'], { inheritStdio: true })
    }
    core.endGroup()

    core.startGroup('Open PR')
    const extraContent = inputs.issueNumber ? [`Closes #${inputs.issueNumber}`] : []
    await safeExec('npx', [`@polka-codes/cli@${inputs.cliVersion}`, ...configArgs, ...verboseFlags, 'pr', ...extraContent], {
      inheritStdio: true,
    })
    core.endGroup()
  } catch (error) {
    if (error instanceof Error) {
      core.error(`Failed with error: ${error.message}`)
      core.error(`Stack trace: ${error.stack}`)
      core.setFailed(error.message)
    } else {
      core.error('An unexpected error occurred')
      core.setFailed('An unexpected error occurred')
    }
  }
}
